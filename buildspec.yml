version: 0.2

env:
  shell: bash

phases:
  pre_build:
    commands:
      # Set up the environment for trustzone backend
      - pushd /work/rust-optee-trustzone-sdk && source environment && popd
      # Clean the repostory, which automatically downloads the rust toolchain specified in the repostory
      - make clean
  build:
    commands:
      # Compile and run tests on trustzone
      - make trustzone-veracruz-client-test
      - make trustzone-veracruz-server-test
      - make trustzone-veracruz-test
      # Compile and run veracruz-client tests on sgx; other tests require SGX enable machine.
      - make clean -C runtime-manager
      - make sgx-veracruz-client-test
      - make sgx-veracruz-server-test-dry-run
      - make sgx-veracruz-test-dry-run



#---------------------------------------
#How to set up CodeBuild in AWS
#---------------------------------------
#This is a short note about how to set up CodeBuild in AWS,
#that pulls source code from a GitHub repository and runs test on AWS CodeBuild.
#Note that some steps may require permission; if so, please contact admins.
#- Create a CodeBuild Project.
    #* In the `Source` section, choose github as the source and then 'repository in my github account'.
      #Set up a [webhook](https://docs.aws.amazon.com/codebuild/latest/userguide/sample-github-pull-request.html).
      #In the webhook setup, tick the 'Report build statuses to source provider when your builds start and finish',
      #which allows CodeBuild reports back the result to github.
      #* In the `Environment` section, choose appropriate docker image as the testing environment.
      #If the current user has permission, create an role, which will be automatically granted minimum permissions for access this CodeBuild project.
      #Otherwise, ask an admin to create a role for you, where a template is given as the follows (replace ZONE, ACCOUNT, PROEJCT_NAME):
      #```json
      #{
          #"Version": "2012-10-17",
          #"Statement": [
              #{
                  #"Effect": "Allow",
                  #"Resource": [
                      #"arn:aws:logs:ZONE:ACCOUNT:log-group:/aws/codebuild/PROEJCT_NAME",
                      #"arn:aws:logs:ZONE:ACCOUNT:log-group:/aws/codebuild/PROEJCT_NAME:*"
                  #],
                  #"Action": [
                      #"logs:CreateLogGroup",
                      #"logs:CreateLogStream",
                      #"logs:PutLogEvents"
                  #]
              #},
              #{
                  #"Effect": "Allow",
                  #"Resource": [
                      #"arn:aws:s3:::codepipeline-ZONE-*"
                  #],
                  #"Action": [
                      #"s3:PutObject",
                      #"s3:GetObject",
                      #"s3:GetObjectVersion",
                      #"s3:GetBucketAcl",
                      #"s3:GetBucketLocation"
                  #]
              #},
              #{
                  #"Effect": "Allow",
                  #"Action": [
                      #"codebuild:CreateReportGroup",
                      #"codebuild:CreateReport",
                      #"codebuild:UpdateReport",
                      #"codebuild:BatchPutTestCases",
                      #"codebuild:BatchPutCodeCoverages"
                  #],
                  #"Resource": [
                      #"arn:aws:codebuild:ZONE:ACCOUNT:report-group/PROEJCT_NAME-*"
                  #]
              #}
          #]
      #}
      #```
      #If a custom docker image is used for test, it is recommanded to upload the image to Amazon Elastic Container Registry and bind a new permission to the role created before.
      #An template is given as the follows (replace ZONE, ACCOUNT, IMAGE_NAME):
      #```json
      #{
      #"Version": "2012-10-17",
      #"Statement": [
          #{
              #"Effect": "Allow",
              #"Action": [
                  #"ecr:GetAuthorizationToken"
              #],
              #"Resource": "*"
          #},
          #{
              #"Effect": "Allow",
              #"Action": [
                  #"ecr:BatchCheckLayerAvailability",
                  #"ecr:GetDownloadUrlForLayer",
                  #"ecr:BatchGetImage",
                  #"ecr:PutImage",
                  #"ecr:InitiateLayerUpload",
                  #"ecr:UploadLayerPart",
                  #"ecr:CompleteLayerUpload"
              #],
              #"Resource": "arn:aws:ecr:ZONE:ACCOUNT:repository/IMAGE_NAME"
          #}
      #]
      #}
      #```
#- Report the build log back to GitHub.
  #All information can be found in [here](https://github.com/jlhood/github-codebuild-logs). Some set-up might require permission. Please ask an admin to create a role.
